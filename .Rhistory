train <- sample(dim(updatedDatasetWithOnlyNumericValues)[1],
dim(updatedDatasetWithOnlyNumericValues)[1]*0.80)
temp_train <- updatedDatasetWithOnlyNumericValues[train,]
temp_test <- updatedDatasetWithOnlyNumericValues[-train,]
lmfit = lm(Bay_current_load~Bay_capacity
+company_id	+ store_id +	Bay_id+
Hour_of_the_day	+ Quarter_of_the_day+ 	date_of_month+
Month_of_the_year+ 	quarter_of_the_year+ 	Year,data=temp_train)
summary(lmfit)
pred <- predict(lmfit,temp_test)
plot(model)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mse <- function(error)
{
mean(error^2)
}
print (mse(temp_test$Bay_current_load-pred))
inputDataset2 <- read.csv('C:/Users/Vichu/Downloads/trolley_warehouse_tet.csv',header = T,stringsAsFactors = F)
pred <- predict(lmfit,inputDataset2)
shiny::runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/DataSetSummary.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2.csv')
testset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2_test.csv',header = T,stringsAsFactors = F)
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
correlationMatrix <- c()
for(i in 1:dim(updatedDatasetWithOnlyNumericValues)[2])
{
correlationMatrix[i] <- cor(updatedDatasetWithOnlyNumericValues[,i],updatedDatasetWithOnlyNumericValues[,'Used_Items'])
}
plot(correlationMatrix)
set.seed(2)
train <- sample(dim(updatedDatasetWithOnlyNumericValues)[1],
dim(updatedDatasetWithOnlyNumericValues)[1]*0.65)
temp_train <- updatedDatasetWithOnlyNumericValues[train,]
temp_test <- updatedDatasetWithOnlyNumericValues[-train,]
subset(inputDataset,inputDataset$Company.name==input$company_list_id)
lmfit = lm(Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id ,data=temp_train)
summary(lmfit)
pred <- predict(lmfit,temp_test)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mse <- function(error)
{
mean(error^2)
}
print (mse(temp_test$Used_Items-pred))
library(e1071)
model <- svm(Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id , temp_train)
predictedUsed_Items <- predict(model, temp_train)
error <- temp_train$Used_Items - predictedUsed_Items
rmse <- function(error)
{
sqrt(mean(error^2))
}
svrPredictionRMSE <- rmse(error)
print(svrPredictionRMSE)
# perform a grid search
tuneResult <- tune(svm, Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id,  data = temp_train,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
)
print(tuneResult)
plot(tuneResult)
tuneResult <- tune(svm, Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id,  data = temp_train,
ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
)
tunedModel <- tuneResult$best.model
print(tunedModel)
tuneResult <- tune(svm, Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id,  data = temp_train,
ranges = list(epsilon = 0, cost = 128)
)
tunedModel <- tuneResult$best.model
print(tunedModel)
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/DataSetSummary.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
testset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2_test.csv',header = T,stringsAsFactors = F)
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
correlationMatrix <- c()
for(i in 1:dim(updatedDatasetWithOnlyNumericValues)[2])
{
correlationMatrix[i] <- cor(updatedDatasetWithOnlyNumericValues[,i],updatedDatasetWithOnlyNumericValues[,'Used_Items'])
}
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
correlationMatrix <- c()
for(i in 1:dim(updatedDatasetWithOnlyNumericValues)[2])
{
correlationMatrix[i] <- cor(updatedDatasetWithOnlyNumericValues[,i],updatedDatasetWithOnlyNumericValues[,'Used_Items'])
}
plot(correlationMatrix)
set.seed(2)
train <- sample(dim(updatedDatasetWithOnlyNumericValues)[1],
dim(updatedDatasetWithOnlyNumericValues)[1]*0.65)
temp_train <- updatedDatasetWithOnlyNumericValues[train,]
temp_test <- updatedDatasetWithOnlyNumericValues[-train,]
set.seed(2)
train <- sample(dim(updatedDatasetWithOnlyNumericValues)[1],
dim(updatedDatasetWithOnlyNumericValues)[1]*0.65)
temp_train <- updatedDatasetWithOnlyNumericValues[train,]
temp_test <- updatedDatasetWithOnlyNumericValues[-train,]
subset(inputDataset,inputDataset$Company.name==input$company_list_id)
lmfit = lm(Used_Items~ Quarter_of_the_day  +
company_id+	store_id+	Bay_id ,data=temp_train)
summary(lmfit)
pred <- predict(lmfit,temp_test)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mse <- function(error)
{
mean(error^2)
}
print (mse(temp_test$Used_Items-pred))
testset$company_id = CompanyId
datetest<- seq( as.Date("2011-07-01"), by=1, len=3)
datetest<-  as.Date("2011-07-01")
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
datetest<-  as.Date("2011-07-01")
strsplit(datetest, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)
month(datetest)
library(chron)
as.data.frame(month.day.year(dat))
dat <- as.Date(c("6/12/2009", "4/15/2010"), "%m/%d/%Y")
as.data.frame(month.day.year(dat))
datevalue <- as.Date(c("6/12/2009", "4/15/2010"), "%m/%d/%Y")
datevalue<- as.data.frame(month.day.year(datevalue))
datevalue <- as.Date(c("6/12/2009"), "%m/%d/%Y")
datevalue<- as.data.frame(month.day.year(datevalue))
print(datevalue.day)
print(datevalue[0].day)
month.day.year(datevalue)
datevalue <- as.Date(c("6/12/2009"), "%m/%d/%Y")
month.day.year(datevalue)
t1<- month.day.year(datevalue)
t1$month
t1<- (month.day.year(datevalue)).$month
datevalue <- as.Date(c("6/12/2009"), "%m/%d/%Y")
t1<- month.day.year(datevalue)
t1$month
library(lubridate)
wday(datevalue, label = TRUE)
wday(datevalue, label = FALSE)
datevalue <- as.Date(c("10/22/2016"), "%m/%d/%Y")
t1<- month.day.year(datevalue)
datevalue <- as.Date(c("10/22/2016"), "%m/%d/%Y")
t1<- month.day.year(datevalue)
t1$month
t1$day
library(lubridate)
wday(datevalue, label = FALSE)
datevalue <- as.Date(c("10/23/2016"), "%m/%d/%Y")
t1<- month.day.year(datevalue)
t1$month
t1$day
library(lubridate)
wday(datevalue, label = FALSE)
datevalue <- as.Date(c("10/23/2016"), "%m/%d/%Y")
library(lubridate)
wday(datevalue, label = FALSE)
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
install.packages(c("maps", "mapproj"))
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('testdynamic')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Ex1')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
datevalue <- as.Date(c("10/23/2016"), "%m/%d/%Y")
library(lubridate)
wday(datevalue, label = FALSE)
day(datevalue, label = FALSE)
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/DataSetSummary.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
testset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2_test.csv',header = T,stringsAsFactors = F)
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
barplot(inputDataset[,inputDataset$Bay.id] ,
main=inputDataset$Bay.id,
ylab="Number of Bay_id",
xlab="Bay_id")
barplot(inputDataset[,inputDataset$Bay.id] ,
main=inputDataset$Bay.id,
ylab="inputDataset$Bay.id",
xlab="inputDataset$Bay.id")
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Bay_capacity)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Bay_id)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Bay_id,y=Bay_capacity)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(y=Used_Items)) + geom_histogram()
barplot(inputDataset[,inputDataset$Bay_id] ,
main=inputDataset$Bay_id,
ylab="inputDataset$Bay_id",
xlab="inputDataset$Bay_id")
barplot(inputDataset[,inputDataset$Bay_id] ,
main=inputDataset$Bay_capacity,
ylab="inputDataset$Bay_id",
xlab="inputDataset$Bay_id")
barplot(inputDataset[,inputDataset$Bay_id] ,
main=inputDataset$Bay_capacity,
ylab="inputDataset$Bay_capacity",
xlab="inputDataset$Bay_capacity")
library(datasets)
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
WorldPhones1<-WorldPhones
View(WorldPhones1)
barplot(WorldPhones[,'Asia' ]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
barplot(WorldPhones[,'Asia' ]*1000,
main='Asia',
ylab="Number of Telephones",
xlab="Year")
View(inputDataset)
barplot(inputDataset[,inputDataset$Bay.id ]*1000,
main=inputDataset$Bay.id,
ylab="Number of Telephones",
xlab="Year")
barplot(inputDataset[,inputDataset$Bay.id ]*1000,
main=inputDataset$Bay.id,
ylab="Number of Telephones",
xlab="Year")
barplot(inputDataset[,inputDataset$Bay.id ]*1000,
main=inputDataset$Bay.id,
ylab="Capacity",
xlab="Bay.id")
barplot(inputDataset[,Bay.id ]*1000,
main=inputDataset$Bay.id,
ylab="Capacity",
xlab="Bay.id")
barplot(inputDataset[,Bay.id ] ,
main=inputDataset$Bay.id,
ylab="Capacity",
xlab="Bay.id")
barplot(inputDataset[,$Bay.id ] ,
main=inputDataset$Bay.id,
ylab="Capacity",
xlab="Bay.id")
barplot(inputDataset[,'Bay.id' ] ,
main=inputDataset$Bay.id,
ylab="Capacity",
xlab="Bay.id")
barplot(inputDataset[,'Bay.id' ] ,
main=inputDataset$Bay.id,
ylab="Count",
xlab="Bay.id")
barplot(inputDataset[,'Bay.id' ] ,
main=inputDataset$Bay.id,
ylab="Count",
xlab="Bay")
barplot(inputDataset[,'Bay.id' ] ,
main='test',
ylab="Count",
xlab="Bay")
barplot(inputDataset[,'Store.id' ] ,
main='test',
ylab="Count",
xlab="Bay")
barplot(inputDataset[,aes(x=Bay_id,y=Bay_capacity) ] ,
main='test',
ylab="Count",
xlab="Bay")
subsetplot<- inputDataset[,'Bay.id']
subsetplot<- inputDataset[,'Bay.id','Capacity
subsetplot<- inputDataset[,'Bay.id','Capacity']
subsetplot<- inputDataset[,'Bay.id','Capacity']
barplot(inputDataset[,'Store.id' ] ,
main='test',
ylab="Count",
xlab="Bay")
barplot(inputDataset[,'Capacity' ] ,
main='test',
ylab="Count",
xlab="Bay")
barplot(inputDataset[,'Capacity' ] ,
main='test',
ylab="Count",
xlab="Bay Id")
barplot(inputDataset[,'Capacity' ] ,
main='test',
ylab="Stock Count",
xlab="Bays")
barplot(inputDataset[,'Capacity' ] ,
main='Baywise Stock',
ylab="Stock Count",
xlab="Bays")
barplot(inputDataset[,'Capacity' ] ,
main='Bay-wise Stock',
ylab="Stock Count",
xlab="Bays")
barplot(inputDataset[,'Capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays")
barplot(inputDataset[,'Capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays", ymin=20)
barplot(inputDataset[,'Capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays", ylim(20))
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
barplot(trainset[,'Bay_id' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays", y=20)
barplot(trainset[,'Bay_id' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays")
barplot(trainset[,'Capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays")
barplot(trainset[,'Bay_Capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays")
barplot(trainset[,'Bay_capacity' ] ,
main='Bay-wise Capacity',
ylab="Stock Count",
xlab="Bays")
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
install.packages("shinythemes")
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
library(markdown)
install.packages("markdown")
library(markdown)
install.packages("markdown")
library(markdown)
cars
install.packages("rCharts")
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
faithful
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
View(inputDataset)
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset1<- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
shinyServer (function(input,output){
inputDataset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/DataSetSummary.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
testset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2_test.csv',header = T,stringsAsFactors = F)
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
shiny::runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Final/TrolleyMgmt')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset <- read.csv('DataSetSummary.csv')
trainset <- read.csv('data_cons.csv')
testset <- read.csv('test.csv',header = T,stringsAsFactors = F)
inputDataset <- read.csv('dataSetSummary.csv')
inputDataset1<- read.csv('data_cons.csv')
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/18_10_2016')
inputDataset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/DataSetSummary.csv')
trainset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/data_cons.csv')
testset <- read.csv('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Data/trolley_warehouse_S1_B1_V2_test.csv',header = T,stringsAsFactors = F)
AttributesIntrainset<- c()
for(i in 1:dim(trainset)[2])
{
if(is.numeric(trainset[,i])|| is.integer(trainset[,i]))
{
AttributesIntrainset[i]=T
}
else
{
AttributesIntrainset[i]=F
}
}
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
ggplot(u
updatedDatasetWithOnlyNumericValues <- na.omit(trainset[,AttributesIntrainset])
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Used_Items/Bay_capacity)) + geom_histogram()
ggplot(updatedDatasetWithOnlyNumericValues, aes(x=Bay_id,y=Bay_capacity)) + geom_histogram()
correlationMatrix <- c()
for(i in 1:dim(updatedDatasetWithOnlyNumericValues)[2])
{
correlationMatrix[i] <- cor(updatedDatasetWithOnlyNumericValues[,i],updatedDatasetWithOnlyNumericValues[,'Used_Items'])
}
plot(correlationMatrix)
runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Final/TrolleyMgmt')
shiny::runApp('E:/Study/semester 3/Bus Intelligence for Decision Support/Assignments/Prototype/Final/TrolleyMgmt')
runApp('E:/Study/semester 3/Project/TrolleyMgmtAnalytics/TrolleyMgmt')
